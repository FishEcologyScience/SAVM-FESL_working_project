---
title: "Get started with SAVM"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Get started with SAVM}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup}
library(SAVM)
library(sf)
library(stars)
```



# Introduction

This vignette provides an overview of the workflow offered by the **Submerged Aquatic Vegetation Model (SAVM) R package**. The package allows users to import spatial and tabular data related to SAV presence and habitat conditions in aquatic ecosystems. The presented in this vignette provide an overview of the functionalities built into the package and presents a workflow from user input to model predictions. 


# User workflow

## R as a GIS 

To use SAVM, basic knowledge about using R to work with spatial objects. 
There are several packages that turn R into a powerful Geospatial Information System (GIS). 
One of the most popular is [`sf`](https://r-spatial.github.io/sf/), 
which can read a wide variety of spatial file formats, including ESRI shapefiles. 
Assuming you have the following shapefile files:

```
lake_erie_land
├── LkErie_Land_fromGLAF_Water_WGS_Feb2020.cpg
├── LkErie_Land_fromGLAF_Water_WGS_Feb2020.dbf
├── LkErie_Land_fromGLAF_Water_WGS_Feb2020.prj
├── LkErie_Land_fromGLAF_Water_WGS_Feb2020.sbn
├── LkErie_Land_fromGLAF_Water_WGS_Feb2020.sbx
├── LkErie_Land_fromGLAF_Water_WGS_Feb2020.shp
├── LkErie_Land_fromGLAF_Water_WGS_Feb2020.shp.xml
└── LkErie_Land_fromGLAF_Water_WGS_Feb2020.shx
```

then `st_read(lake_erie_land/LkErie_Land_fromGLAF_Water_WGS_Feb2020.shx)` is used to read the shapefile into a `sf` object used to do spatial operations with R. For instance, the shapefile can be plot as follows:


```R
erie_land <- st_read("lake_erie_land/LkErie_Land_fromGLAF_Water_WGS_Feb2020.shx")
plot(erie_land)
```

```{r echo = FALSE}
erie_land <- system.file(
 "example", "lake_erie_land", "LkErie_Land_fromGLAF_Water_WGS_Feb2020.shx",
  package = "SAVM", mustWork = TRUE
) |> 
  st_read()

erie_land |> 
  st_geometry() |> # to plot only the geometry
  plot(col = 1)
```

The package `SAVM` includes a util function to invert a polygon. 

```{r invert}
erie_lake  <- erie_land |>
  invert_polygon()
  
erie_lake |>
  st_geometry() |>
  plot(col = 1)
```

Using `sf` capacities, the file can then be exported in various format, for instance in [GeoPackage](https://www.geopackage.org/):

```R
erie_lake |> sf::st_write("lake_erie.gpkg")
```

Note that `sf` focuses on vector files, to read and manipulate raster file
we will use the package [`stars`](https://r-spatial.github.io/stars/) that works seamlessly with `sf`.



## Reading file 

Now we consider a zone near Buffalo in the Lake Erie. Note that all 
the data required are included on in the package SAVM. We first load the geopackage of Lake Erie. 

```{r reading1}
# Lake Erie boundaries polygon (reading from SAVM internal files)
le_bound <- system.file("example", "lake_erie.gpkg", package = "SAVM") |>
  sf::st_read() |>
  sf::st_transform(crs = 3857)
```

We then load the shapefile of the area of interest that is stored as a GeoJSON file. Note that for the area (or points) of interest, we use `read_sav()` that returns an object of class `sav_data`. 

```{r reading2}
# Lake Erie study zone: read
study_zone <- system.file("example", "study_zone.geojson", package = "SAVM") |>
  read_sav(spacing = 1000)
```

Note that the corresponfing grid can be visualized using the `preview_grid()` function. 

```{r preview_grid}
preview_grid(study_zone)
```

We now load the depth data.

```{r reading3}
# Depth (reading with stars)
study_depth <- stars::read_stars(system.file("example", "le_bathy.tiff", package = "SAVM"))
```

> ***Note on spatial projections***: *The `SAVM` package works with spatial coordinates in meters and the WGS 84 / UTM zone 17N ([epsg:32617](https://epsg.io/32617)) projection as a default option since it was originally developped for use in the Great Lakes (WGS 84 / UTM zone 18N ([epsg:32618](https://epsg.io/32618)) is also a an option). Other viable options in a North American context are NAD83 / UTM zone 17N ([epsg:26917](https://epsg.io/26917)) and NAD83(CSRS) / UTM zone 17N ([egsg::2958](https://epsg.io/2958)).*


## Compute fetch and extract depth

### Compute fetch 

To compute wind fetch (in kilometers), we called `compute_fetch()`. By default, the maximum distance is set to 15 km (see argument `max_dist`) and the default number of bearings is 16 (see argument `n_bearings`).

```{r fetch}
fetch <- compute_fetch(study_zone$points, le_bound)
fetch
```

`fetch` is a list of two elements, `mean_fetch`, an `sf` object with all
summarized computations and `transect_lines`, a `sf` object that includes all 
transect lines. As `sf` objects, both elements can easily be exported, for 
instance, the following code writes `fetch$mean_fetch` as a shapefile:

```{r fetch_export, eval = FALSE}
fetch$mean_fetch  |> sf::st_write("fetch.shp")
```


### Extract depth 

To extract depth data from a raster file for our study points, we use `st_extract()` from the package `stars`. Note that the points and the raster must use the same projection.

```{r extract_depth}
depth <- st_extract(
  study_depth, 
  study_zone$points |>
    sf::st_transform(crs = sf::st_crs(study_depth))
)
depth
```

This return an sf object ad the `le_bathy.tiff` contain the depth values. 



## Model 

With the `depth` and `fetch`, we create a `sf` object that contains predictor values for all points.

```{r create_df}
sp_dat <- fetch$mean_fetch
sp_dat$depth_m <- depth$le_bathy.tiff
```

You can generate predictions using `sav_model(sp_dat)`. By default, the function uses the column names in the input data to identify the relevant variables. If the column names are not recognized, you can manually specify them using the `depth` and `fetch` parameters.

```{r model1}
# get input
res <- sav_model(sp_dat)
res
```

Even without additional columns, the model will return columns containing post hoc results. For SAV cover, if presence-absence predictions are available, the `cover_post_hoc` column will contain `cover_pred` values set to 0 where absence is predicted.

There are three additionnal limitaions that can be used as posthoc treatement. The `secchi` parameter should contain Secchi depth values and is used to compute Vmax following the equation from Chambers and Kalff (1985). If `depth` is also provided, it is compared to Vmax: when the depth exceeds Vmax, both cover and presence-absence are set to 0. The `substrate` and `limitation` parameters are binary variables that can be used to set cover and presence-absence to 0 based on external knowledge or site-specific constraints.

Below we used an example with random Secchi depth values:

```{r model2}
res_secchi <- sav_model(
  cbind(sp_dat, secchi = runif(nrow(sp_dat), 4, 12))
  )
res_secchi
```

Note that `res_secchi` is a `sf` object and can therefore be exported as a shapefile: 

```{r final_export, eval = FALSE}
res_secchi |> sf::st_write("results.shp")
```



## Vizualize

The package includes plotting helper functions. `plot_sav_distribution(res)` allows users to visualize the distribution of SAV cover and presence/absence across predictor bins. Alternatively, `plot_sav_density(res)` provides a density-based visualization rather than using binned values.

```{r plot1}
# Visualize results
plot_sav_distribution(res_secchi)
plot_sav_density(res_secchi)
```

Note that these functions include an option to force the use of raw predictions without applying the post hoc treatment.

```{r, plot2}
plot_sav_distribution(res_secchi, post_hoc = FALSE)
plot_sav_density(res_secchi, post_hoc = FALSE)
```


Finally, the function `plot_sav_tmap()` allows to draw map by leveraging the 
package `tmap` (https://r-tmap.github.io/tmap/).


```{r}
study_zone$points <- cbind(study_zone$points, res)
plot_sav_tmap(study_zone)
plot_sav_tmap(study_zone, layers = "cover", interactive = FALSE)
```



# References 

* Croft-White, M.V., Tang, R., Gardner Costa, J., Doka, S.E., and Midwood, J.
D. 2022. Modelling submerged aquatic vegetation presence and percent cover
to support the development of a freshwater fish habitat management tool.
Can. Tech. Rep. Fish. Aquat. Sci. 3497: vi + 30 p.

* Chambers, P.A., and Kalff, J. 1985. Depth Distribution and Biomass of
Submerged aquatic macrophyte communities in relation to secchi depth.
Can. J. Fish. Aquat. Sci. 42: 701–709