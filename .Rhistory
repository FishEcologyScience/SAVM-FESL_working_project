ggmap = NA,                # No minimum version required
plotly = NA,
sjPlot = NA,
ggsn = NA,
caret = "6.0-93",
pdp = NA,
ROCR = NA,
pROC = NA,
lme4 = NA,
data.table = NA,
patchwork = NA,
rgdal = NA,
leaflet = NA,
rio = NA,
readxl = NA,
emmeans = NA,
lubridate = NA,
vegan = NA,
corrplot = NA,
randomForest = "4.7-1.1",
rfUtilities = NA)
packages_to_install <- c()  # initialize an empty vector
for (loop_pkg in names(required_packages)) {
loop_required_version <- required_packages[[loop_pkg]]
if (!requireNamespace(loop_pkg, quietly = TRUE)) {
# Package not installed
packages_to_install <- c(packages_to_install, loop_pkg)
} else if (!is.na(loop_required_version)) {
# Package installed, but check if version meets the requirement
loop_installed_version <- utils::packageVersion(loop_pkg)
if (loop_installed_version < loop_required_version) {
# Version too old, mark for install/update
packages_to_install <- c(packages_to_install, loop_pkg)
}
}
# If package is installed and no version is specified, do nothing
}
#Clean up
rm(loop_pkg); rm(loop_installed_version); rm(loop_required_version)
# Step 4: Install missing or outdated packages
if (length(packages_to_install) > 0) {
install.packages(packages_to_install)
}
# Step 5: Load all required packages
lapply(names(required_packages), library, character.only = TRUE)
#Pre-install packages used by SAVM to bypass issues
#----------------------------#
library(devtools)
library(pak)
library(cli)
library(dplyr)
library(ggplot2)
library(patchwork)
library(rlang)
library(sf)
library(stats)
library(tmap)
library(tools)
library(units)
library(utils)
library(viridis)
devtools::load_all("SAVM_v0.0.1")
#Pre-install packages used by SAVM to bypass issues
#----------------------------#
library(devtools)
library(pak)
library(cli)
library(dplyr)
library(ggplot2)
library(patchwork)
library(rlang)
library(sf)
library(stats)
library(tmap)
library(tools)
library(units)
library(utils)
library(viridis)
devtools::load_all("SAVM_v0.0.1")
`pkgbuild::check_build_tools(debug = TRUE)`
pkgbuild::check_build_tools(debug = TRUE)
#Pre-install packages used by SAVM to bypass issues
#----------------------------#
library(devtools)
library(pak)
library(cli)
library(dplyr)
library(ggplot2)
library(patchwork)
library(rlang)
library(sf)
library(stats)
library(tmap)
library(tools)
library(units)
library(utils)
library(viridis)
devtools::load_all("SAVM_v0.0.1")
### Read in Jons data
#----------------------------#
#Shapefiles
LH_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKHuron/LKHuron_Land_fromGLAF_Water_WGS_Feb2020.shp")
LO_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKO/LKO_Land_fromGLAF_Water_WGS_Feb2020.shp")
library(devtools)
library(pak)
library(cli)
library(dplyr)
library(ggplot2)
library(patchwork)
library(rlang)
library(sf)
library(stats)
library(tmap)
library(tools)
library(units)
library(utils)
library(viridis)
### Read in Jons data
#----------------------------#
#Shapefiles
LH_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKHuron/LKHuron_Land_fromGLAF_Water_WGS_Feb2020.shp")
LO_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKO/LKO_Land_fromGLAF_Water_WGS_Feb2020.shp")
#Points
LH_data_raw <- read.csv("02 - Data/SAV_2024 Samples - Fetch Ready/SAV_2024_LakeHuronPoints_20May2025.csv")
LO_data_raw <- read.csv("02 - Data/SAV_2024 Samples - Fetch Ready/SAV_2024_LakeOntarioPoints_20May2025.csv")
### Plot Raw Data
ggplot()+
geom_sf(data=LH_shapefile, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_point(data = LH_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
ggplot()+
geom_sf(data=LO_shapefile, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_point(data = LO_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
### Format data
#----------------------------#
#Reproject to use meters
LH_shapefile_m <- st_transform(LH_shapefile, crs = 32617)
LO_shapefile_m <- st_transform(LO_shapefile, crs = 32617)
#Turn from table into spatial object
LH_data <- st_as_sf(LH_data_raw, coords = c("POINT_X", "POINT_Y"), crs = 4326)
LO_data <- st_as_sf(LO_data_raw, coords = c("POINT_X", "POINT_Y"), crs = 4326)
#Reproject to use meters
LH_data_m <- st_transform(LH_data, crs = 32617)
LO_data_m <- st_transform(LO_data, crs = 32617)
### Plot Transformed Data
ggplot()+
geom_sf(data=LH_shapefile_m, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_sf(data=LH_data_m, colour = "blue", fill=NA, inherit.aes = FALSE)+
ylab("Northing")+xlab("Easting")+
theme_classic()
ggplot()+
geom_sf(data=LO_shapefile_m, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_sf(data=LO_data_m, colour = "blue", fill=NA, inherit.aes = FALSE)+
ylab("Northing")+xlab("Easting")+
theme_classic()
### Calculate fetch
#----------------------------#
LH_fetch <- compute_fetch(points=LH_data_m, polygon=LH_shapefile_m)
LO_fetch <- compute_fetch(points=LO_data_m, polygon=LO_shapefile_m)
LH_shapefile_aligned <- LH_shapefile_m %>%
#st_transform(crs = 3857) %>%
# Keep only a single identifier field to match le_bound's format
transmute(OBJECTID_1 = 0) %>%
# Ensure geometry is still valid
st_make_valid()
LH_fetch <- compute_fetch(points=LH_data_m, polygon=LH_shapefile_aligned)
LH_shapefile_aligned <- LH_shapefile_m %>%
#st_transform(crs = 3857) %>%
# Keep only a single identifier field to match le_bound's format
transmute(OBJECTID_1 = 0) %>%
LO_shapefile_aligned <- LO_shapefile_m %>%
transmute(OBJECTID_1 = 0) %>%
# Ensure geometry is still valid
st_make_valid()
LO_shapefile_aligned <- LO_shapefile_m %>%
transmute(OBJECTID_1 = 0) %>%
# Ensure geometry is still valid
st_make_valid()
View(LO_shapefile_aligned)
LH_fetch <- compute_fetch(points=LO_data_m, polygon=LO_shapefile_aligned)
# Check CRS (again, just to verify both are now in EPSG:3857)
st_crs(LO_data_m)
st_crs(LO_shapefile_aligned)
# Verify all points fall within the polygon using st_within()
within_test <- st_within(LO_data_m, LO_shapefile_aligned)
# Count how many are outside the polygon (0-length list entries)
sum(lengths(within_test) == 0)
LO_data_m[lengths(within_test) == 0, ]
# Optional: extract those points for visual inspection
points_outside <- LO_data_m[lengths(within_test) == 0, ]
# Visual check (if you're using RStudio or another viewer)
library(ggplot2)
ggplot() +
geom_sf(data = LO_shapefile_aligned, fill = "lightblue", color = "darkblue") +
geom_sf(data = LO_data_m, color = "red", size = 0.7) +
geom_sf(data = points_outside, color = "black", size = 1.5, shape = 4) +  # cross mark for outside points
theme_minimal()
### Read in Jons data
#----------------------------#
#Shapefiles
#LH_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKHuron/LKHuron_Land_fromGLAF_Water_WGS_Feb2020.shp")
#LO_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKO/LKO_Land_fromGLAF_Water_WGS_Feb2020.shp")
LH_shapefile <- st_read("02 - Data/LakeHuron/LKH_Water_Temp_Mar2025.shp")
### Read in Jons data
#----------------------------#
#Shapefiles
#LH_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKHuron/LKHuron_Land_fromGLAF_Water_WGS_Feb2020.shp")
#LO_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKO/LKO_Land_fromGLAF_Water_WGS_Feb2020.shp")
LH_shapefile <- st_read("02 - Data/LakeHuron/LKH_Water_Temp_May2025.shp")
LO_shapefile <- st_read("02 - Data/LakeONtario/LKO_Water_Temp_May2025.shp")
#Points
LH_data_raw <- read.csv("02 - Data/SAV_2024 Samples - Fetch Ready/SAV_2024_LakeHuronPoints_20May2025.csv")
LO_data_raw <- read.csv("02 - Data/SAV_2024 Samples - Fetch Ready/SAV_2024_LakeOntarioPoints_20May2025.csv")
### Plot Raw Data
ggplot()+
geom_sf(data=LH_shapefile, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_point(data = LH_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
### Plot Raw Data
ggplot()+
geom_sf(data=LH_shapefile, colour = "black", fill=NA, inherit.aes = FALSE, fill="lightblue")+
geom_point(data = LH_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
### Plot Raw Data
ggplot()+
geom_sf(data=LH_shapefile, colour = "black", fill=NA,  fill="lightblue")+
geom_point(data = LH_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
### Plot Raw Data
ggplot()+
geom_sf(data=LH_shapefile, colour = "black", fill=NA)+
geom_point(data = LH_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
### Plot Raw Data
ggplot()+
geom_sf(data=LH_shapefile, colour = "black", inherit.aes = FALSE, fill="lightblue")+
geom_point(data = LH_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
ggplot()+
geom_sf(data=LO_shapefile, colour = "black", fill="lightblue", inherit.aes = FALSE)+
geom_point(data = LO_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
### Format data
#----------------------------#
#Reproject to use meters
LH_shapefile_m <- st_transform(LH_shapefile, crs = 32617)
LO_shapefile_m <- st_transform(LO_shapefile, crs = 32617)
#Turn from table into spatial object
LH_data <- st_as_sf(LH_data_raw, coords = c("POINT_X", "POINT_Y"), crs = 4326)
LO_data <- st_as_sf(LO_data_raw, coords = c("POINT_X", "POINT_Y"), crs = 4326)
#Reproject to use meters
LH_data_m <- st_transform(LH_data, crs = 32617)
LO_data_m <- st_transform(LO_data, crs = 32617)
### Plot Transformed Data
ggplot()+
geom_sf(data=LH_shapefile_m, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_sf(data=LH_data_m, colour = "blue", fill=NA, inherit.aes = FALSE)+
ylab("Northing")+xlab("Easting")+
theme_classic()
ggplot()+
geom_sf(data=LO_shapefile_m, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_sf(data=LO_data_m, colour = "blue", fill=NA, inherit.aes = FALSE)+
ylab("Northing")+xlab("Easting")+
theme_classic()
### Calculate fetch
#----------------------------#
LH_fetch <- compute_fetch(points=LH_data_m, polygon=LH_shapefile_m)
LO_fetch <- compute_fetch(points=LO_data_m, polygon=LO_shapefile_m)
View(LO_fetch)
View(LO_fetch[["mean_fetch"]])
View(LO_fetch[["transect_lines"]])
View(LO_data)
LH_fetch2 <- cbind(LH_data, LH_fetch[["mean_fetch"]])
View(LH_fetch2)
LH_fetch2 <- rbind(LH_data, LH_fetch[["mean_fetch"]])
LH_data
View(LH_fetch2)
with(LH_fetch2, plot(fetch_km ~ Depth))
LO_fetch2 <- rbind(LO_data, LO_fetch[["mean_fetch"]])
LH_fetch2 <- rbind(LH_data_m, LH_fetch[["mean_fetch"]])
LO_fetch2 <- rbind(LO_data_m, LO_fetch[["mean_fetch"]])
LO_fetch2 <- rbind(LO_data_m, LO_fetch[["mean_fetch"]])
LH_fetch2 <- rbind(LH_data, LH_fetch[["mean_fetch"]])
LO_fetch2 <- rbind(LO_data, LO_fetch[["mean_fetch"]])
LH_fetch2 <- rbind(LH_data, as.data.frame(LH_fetch[["mean_fetch"]]))
LH_fetch2 <- rbind(as.data.frame(LH_data), as.data.frame(LH_fetch[["mean_fetch"]]))
as.data.frame(LH_data)
as.data.frame(LH_fetch[["mean_fetch"]])
rbind(as.data.frame(LH_data), as.data.frame(LH_fetch[["mean_fetch"]]))
cbind(as.data.frame(LH_data), as.data.frame(LH_fetch[["mean_fetch"]]))
LH_fetch2 <- cbind(as.data.frame(LH_data), as.data.frame(LH_fetch[["mean_fetch"]]))
View(LH_fetch2)
LO_fetch2 <- cbind(as.data.frame(LO_data), as.data.frame(LO_fetch[["mean_fetch"]]))
## --------------------------------------------------------------#
## Script name: Script2-0_CalcFetch_Jon.R
##
## Purpose of script:
##    Generate fetch estimates for Jon
##
##
## Author: Paul Bzonek
##
## Date Created: 2025-05-22
##
## --------------------------------------------------------------#
## Modification Notes:
##
## --------------------------------------------------------------#
### Read in Jons data
#----------------------------#
#Shapefiles
#Shapefiles where polygon is land do not work
#LH_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKHuron/LKHuron_Land_fromGLAF_Water_WGS_Feb2020.shp") #
#LO_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKO/LKO_Land_fromGLAF_Water_WGS_Feb2020.shp")
#Shapefiles with water as polygon
LH_shapefile <- st_read("02 - Data/LakeHuron/LKH_Water_Temp_May2025.shp")
LO_shapefile <- st_read("02 - Data/LakeONtario/LKO_Water_Temp_May2025.shp")
#Points to append fetch to
LH_data_raw <- read.csv("02 - Data/SAV_2024 Samples - Fetch Ready/SAV_2024_LakeHuronPoints_20May2025.csv")
LO_data_raw <- read.csv("02 - Data/SAV_2024 Samples - Fetch Ready/SAV_2024_LakeOntarioPoints_20May2025.csv")
### Plot Raw Data
ggplot()+
#Check that water is the polygon
geom_sf(data=LH_shapefile, colour = "black", inherit.aes = FALSE, fill="lightblue")+
geom_point(data = LH_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
ggplot()+
geom_sf(data=LO_shapefile, colour = "black", fill="lightblue", inherit.aes = FALSE)+
geom_point(data = LO_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
### Project data
#----------------------------#
#Reproject shapefile to use meters
LH_shapefile_m <- st_transform(LH_shapefile, crs = 32617)
LO_shapefile_m <- st_transform(LO_shapefile, crs = 32617)
LH_data_raw %>%
st_as_sf(coords = c("POINT_X", "POINT_Y"), crs = 4326)
LH_data_raw %>%
st_as_sf(., coords = c("POINT_X", "POINT_Y"), crs = 4326)
### Project data
#----------------------------#
#Reproject shapefile to use meters
LH_shapefile_m <- st_transform(LH_shapefile, crs = 32617)
LO_shapefile_m <- st_transform(LO_shapefile, crs = 32617)
#Turn points into spatial object and reproject
LH_data <- LH_data_raw %>%
st_as_sf(., coords = c("POINT_X", "POINT_Y"), crs = 4326) %>% #Make spatial
st_transform(., crs = 32617) #Tranform to measure dist in meters
LO_data <- LO_data_raw %>%
st_as_sf(., coords = c("POINT_X", "POINT_Y"), crs = 4326) %>% #Make spatial
st_transform(., crs = 32617) #Tranform to measure dist in meters
### Plot Transformed Data
ggplot()+
geom_sf(data=LH_shapefile_m, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_sf(data=LH_data_m, colour = "blue", fill=NA, inherit.aes = FALSE)+
ylab("Northing")+xlab("Easting")+
theme_classic()
## --------------------------------------------------------------#
## Script name: Script2-0_CalcFetch_Jon.R
##
## Purpose of script:
##    Generate fetch estimates for Jon
##
##
## Author: Paul Bzonek
##
## Date Created: 2025-05-22
##
## --------------------------------------------------------------#
## Modification Notes:
##
## --------------------------------------------------------------#
### Read in Jons data
#----------------------------#
#Shapefiles
#Shapefiles where polygon is land do not work
#LH_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKHuron/LKHuron_Land_fromGLAF_Water_WGS_Feb2020.shp") #
#LO_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKO/LKO_Land_fromGLAF_Water_WGS_Feb2020.shp")
#Shapefiles with water as polygon
LH_shapefile <- st_read("02 - Data/LakeHuron/LKH_Water_Temp_May2025.shp")
LO_shapefile <- st_read("02 - Data/LakeONtario/LKO_Water_Temp_May2025.shp")
#Points to append fetch to
LH_data_raw <- read.csv("02 - Data/SAV_2024 Samples - Fetch Ready/SAV_2024_LakeHuronPoints_20May2025.csv")
LO_data_raw <- read.csv("02 - Data/SAV_2024 Samples - Fetch Ready/SAV_2024_LakeOntarioPoints_20May2025.csv")
### Plot Raw Data
ggplot()+
#Check that water is the polygon
geom_sf(data=LH_shapefile, colour = "black", inherit.aes = FALSE, fill="lightblue")+
geom_point(data = LH_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
ggplot()+
geom_sf(data=LO_shapefile, colour = "black", fill="lightblue", inherit.aes = FALSE)+
geom_point(data = LO_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
### Project data
#----------------------------#
#Reproject shapefile to use meters
LH_shapefile_m <- st_transform(LH_shapefile, crs = 32617)
LO_shapefile_m <- st_transform(LO_shapefile, crs = 32617)
#Turn points into spatial object and reproject
LH_data <- LH_data_raw %>%
st_as_sf(., coords = c("POINT_X", "POINT_Y"), crs = 4326) %>% #Make spatial
st_transform(., crs = 32617) #Tranform to measure dist in meters
LO_data <- LO_data_raw %>%
st_as_sf(., coords = c("POINT_X", "POINT_Y"), crs = 4326) %>% #Make spatial
st_transform(., crs = 32617) #Tranform to measure dist in meters
### Plot Transformed Data
ggplot()+
geom_sf(data=LH_shapefile_m, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_sf(data=LH_data_m, colour = "blue", fill=NA, inherit.aes = FALSE)+
ylab("Northing")+xlab("Easting")+
theme_classic()
### Project data
#----------------------------#
#Reproject shapefile to use meters
LH_shapefile_m <- st_transform(LH_shapefile, crs = 32617)
LO_shapefile_m <- st_transform(LO_shapefile, crs = 32617)
#Turn points into spatial object and reproject
LH_data_m <- LH_data_raw %>%
st_as_sf(., coords = c("POINT_X", "POINT_Y"), crs = 4326) %>% #Make spatial
st_transform(., crs = 32617) #Tranform to measure dist in meters
LO_data_m <- LO_data_raw %>%
st_as_sf(., coords = c("POINT_X", "POINT_Y"), crs = 4326) %>% #Make spatial
st_transform(., crs = 32617) #Tranform to measure dist in meters
### Plot Transformed Data
ggplot()+
geom_sf(data=LH_shapefile_m, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_sf(data=LH_data_m, colour = "blue", fill=NA, inherit.aes = FALSE)+
ylab("Northing")+xlab("Easting")+
theme_classic()
ggplot()+
geom_sf(data=LO_shapefile_m, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_sf(data=LO_data_m, colour = "blue", fill=NA, inherit.aes = FALSE)+
ylab("Northing")+xlab("Easting")+
theme_classic()
### Calculate fetch
#----------------------------#
#Run fetch function
LH_fetch_raw <- compute_fetch(points=LH_data_m, polygon=LH_shapefile_m)
LO_fetch_raw <- compute_fetch(points=LO_data_m, polygon=LO_shapefile_m)
#Reappend new fetch data with dataset
LH_fetch <- cbind(as.data.frame(LH_data), as.data.frame(LH_fetch_raw[["mean_fetch"]]))
LO_fetch <- cbind(as.data.frame(LO_data), as.data.frame(LO_fetch_raw[["mean_fetch"]]))
#Check that data is reasonable
with(LH_fetch, plot(fetch_km ~ Depth))
with(LO_fetch, plot(fetch_km ~ Depth))
#Print data
write.csv(LH_fetch, "03 - Outputs/LH_fetch.csv")
write.csv(LH_fetch, "03 - Outputs/LH_fetch.csv")
write.csv(LO_fetch, "03 - Outputs/LO_fetch.csv")
View(LO_fetch)
View(LH_data_raw)
LH_fetch_raw[["mean_fetch"]]
View(LO_data)
View(LO_data_raw)
left_join(LH_data_raw, LH_data)
as.data.frame(left_join(LH_data_raw, LH_data))
#Reappend new fetch data with dataset
LH_fetch <- cbind(as.data.frame(left_join(LH_data_raw, LH_data)), as.data.frame(LH_fetch_raw[["mean_fetch"]]))
LO_fetch <- cbind(as.data.frame(left_join(LO_data_raw, LO_data)), as.data.frame(LO_fetch_raw[["mean_fetch"]]))
#Check that data is reasonable
with(LH_fetch, plot(fetch_km ~ Depth))
with(LO_fetch, plot(fetch_km ~ Depth))
#Print data
write.csv(LH_fetch, "03 - Outputs/LH_fetch.csv")
write.csv(LO_fetch, "03 - Outputs/LO_fetch.csv")
?compute_fetch
View(LO_fetch)
View(LO_fetch_raw)
View(LO_fetch_raw[["transect_lines"]])
LH_fetch_raw2 <- compute_fetch(points=LH_data_m, polygon=LH_shapefile_m, n_quad_seg = 4)
LO_fetch_raw2 <- compute_fetch(points=LO_data_m, polygon=LO_shapefile_m, n_quad_seg = 4)
### Format outputs
#----------------------------#
#Reappend new fetch data with dataset
LH_fetch2 <- cbind(as.data.frame(left_join(LH_data_raw, LH_data)), as.data.frame(LH_fetch2_raw[["mean_fetch"]]))
### Format outputs
#----------------------------#
#Reappend new fetch data with dataset
LH_fetch2 <- cbind(as.data.frame(left_join(LH_data_raw, LH_data)), as.data.frame(LH_fetch_raw2[["mean_fetch"]]))
LO_fetch2 <- cbind(as.data.frame(left_join(LO_data_raw, LO_data)), as.data.frame(LO_fetch_raw2[["mean_fetch"]]))
#Check that data is reasonable
with(LH_fetch2, plot(fetch_km ~ Depth))
with(LO_fetch2, plot(fetch_km ~ Depth))
#Print data
write.csv(LH_fetch2, "03 - Outputs/LH_fetch2.csv")
write.csv(LO_fetch2, "03 - Outputs/LO_fetch2.csv")
