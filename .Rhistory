devtools::load_all("SAVM_v0.0.1")
View(LO_fetch_raw2)
LO_fetch_raw2[["transect_lines"]]
LO_fetch_raw2[["transect_lines"]]
#Grab transect lines for Jon
LO_transects <- LO_fetch_raw2[["transect_lines"]] %>%
filter(rank < 5)
View(LO_transects)
#Grab transect lines for Jon
LO_transects <- LO_fetch_raw2[["transect_lines"]] %>%
filter(rank > 12)
LO_transects %>%
group_by(id_point) %>%
summarize(fetch_4pts = mean(`transect_length [m]`))
LO_transects %>%
group_by(id_point) %>%
summarize(fetch_4pts = mean(transect_length))
LH_transects <- LH_fetch_raw2[["transect_lines"]] %>%
filter(rank > 12)
LH_transects %>%
group_by(id_point) %>%
summarize(fetch_4pts = mean(transect_length))
library(SAVM)
#Pre-install packages used by SAVM to bypass issues
#----------------------------#
library(devtools)
library(pak)
library(cli)
library(dplyr)
library(ggplot2)
library(patchwork)
library(rlang)
library(sf)
library(stats)
library(tmap)
library(tools)
library(units)
library(utils)
library(viridis)
devtools::load_all("SAVM_v0.0.1")
library(SAVM)
library(sf)
library(stars)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Lake Erie boundaries polygon
le_bound <- system.file("example", "lake_erie.gpkg", package = "SAVM") |>
sf::st_read() |>
sf::st_transform(crs = 3857)
# Lake Erie study zone: read
study_zone <- system.file("example", "study_zone.geojson", package = "SAVM") |>
read_sav(spacing = 2000)
# Depth
study_depth <- stars::read_stars(system.file("example", "le_bathy.tiff", package = "SAVM"))
fetch <- compute_fetch(study_zone$points, le_bound)
fetch
depth <- st_extract(
study_depth,
study_zone$points |>
sf::st_transform(crs = sf::st_crs(study_depth))
)
depth
st_extract
?st_extract
View(depth)
dat <- data.frame(
depth_m = depth$le_bathy.tiff,
fetch_km = fetch$mean_fetch$fetch_km
)
# get input
res <- sav_model(dat)
res
res_secchi <- sav_model(
cbind(dat, secchi = runif(nrow(dat), 4, 12))
)
res_secchi
# Visualize results
plot_sav_distribution(res_secchi)
plot_sav_density(res_secchi)
plot_sav_distribution(res_secchi, post_hoc = FALSE)
plot_sav_density(res_secchi, post_hoc = FALSE)
study_zone$points <- cbind(study_zone$points, res)
plot_sav_tmap(study_zone)
plot_sav_tmap(study_zone, layers = "cover", interactive = FALSE)
# Step 1: Define required packages
# Only specify version numbers where needed; others will default to NA
required_packages <- c(
raster = "3.5-15",         # Example with minimum version
tidyverse = "2.0.0",
ggmap = NA,                # No minimum version required
plotly = NA,
sjPlot = NA,
ggsn = NA,
caret = "6.0-93",
pdp = NA,
ROCR = NA,
pROC = NA,
lme4 = NA,
data.table = NA,
patchwork = NA,
rgdal = NA,
leaflet = NA,
rio = NA,
readxl = NA,
emmeans = NA,
lubridate = NA,
vegan = NA,
corrplot = NA,
randomForest = "4.7-1.1",
rfUtilities = NA)
packages_to_install <- c()  # initialize an empty vector
for (loop_pkg in names(required_packages)) {
loop_required_version <- required_packages[[loop_pkg]]
if (!requireNamespace(loop_pkg, quietly = TRUE)) {
# Package not installed
packages_to_install <- c(packages_to_install, loop_pkg)
} else if (!is.na(loop_required_version)) {
# Package installed, but check if version meets the requirement
loop_installed_version <- utils::packageVersion(loop_pkg)
if (loop_installed_version < loop_required_version) {
# Version too old, mark for install/update
packages_to_install <- c(packages_to_install, loop_pkg)
}
}
# If package is installed and no version is specified, do nothing
}
#Clean up
rm(loop_pkg); rm(loop_installed_version); rm(loop_required_version)
# Step 4: Install missing or outdated packages
if (length(packages_to_install) > 0) {
install.packages(packages_to_install)
}
# Step 5: Load all required packages
lapply(names(required_packages), library, character.only = TRUE)
library(devtools)
library(pak)
library(cli)
library(dplyr)
library(ggplot2)
library(patchwork)
library(rlang)
library(sf)
library(stats)
library(tmap)
library(tools)
library(units)
library(utils)
library(viridis)
devtools::load_all("SAVM_v0.0.1")
devtools::load_all("SAVM_v0.0.1")
### Read in Jons data
#----------------------------#
#Shapefiles
#Shapefiles where polygon is land do not work
#LH_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKHuron/LKHuron_Land_fromGLAF_Water_WGS_Feb2020.shp") #
#LO_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKO/LKO_Land_fromGLAF_Water_WGS_Feb2020.shp")
#Shapefiles with water as polygon
LH_shapefile <- st_read("02 - Data/LakeHuron/LKH_Water_Temp_May2025.shp")
LO_shapefile <- st_read("02 - Data/LakeONtario/LKO_Water_Temp_May2025.shp")
#Points to append fetch to
LH_data_raw <- read.csv("02 - Data/SAV_2024 Samples - Fetch Ready/SAV_2024_LakeHuronPoints_20May2025.csv")
LO_data_raw <- read.csv("02 - Data/SAV_2024 Samples - Fetch Ready/SAV_2024_LakeOntarioPoints_20May2025.csv")
### Plot Raw Data
ggplot()+
#Check that water is the polygon
geom_sf(data=LH_shapefile, colour = "black", inherit.aes = FALSE, fill="lightblue")+
geom_point(data = LH_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
ggplot()+
geom_sf(data=LO_shapefile, colour = "black", fill="lightblue", inherit.aes = FALSE)+
geom_point(data = LO_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
### Project data
#----------------------------#
#Reproject shapefile to use meters
LH_shapefile_m <- st_transform(LH_shapefile, crs = 32617)
LO_shapefile_m <- st_transform(LO_shapefile, crs = 32617)
#Turn points into spatial object and reproject
LH_data_m <- LH_data_raw %>%
st_as_sf(., coords = c("POINT_X", "POINT_Y"), crs = 4326) %>% #Make spatial
st_transform(., crs = 32617) #Tranform to measure dist in meters
LO_data_m <- LO_data_raw %>%
st_as_sf(., coords = c("POINT_X", "POINT_Y"), crs = 4326) %>% #Make spatial
st_transform(., crs = 32617) #Tranform to measure dist in meters
### Plot Transformed Data
ggplot()+
geom_sf(data=LH_shapefile_m, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_sf(data=LH_data_m, colour = "blue", fill=NA, inherit.aes = FALSE)+
ylab("Northing")+xlab("Easting")+
theme_classic()
?compute_fetch()
version
library(SAVM)
library(sf)
library(stars)
# Lake Erie boundaries polygon
le_bound <- system.file("example", "lake_erie.gpkg", package = "SAVM") |>
sf::st_read() |>
sf::st_transform(crs = 3857)
# Lake Erie study zone: read
study_zone <- system.file("example", "study_zone.geojson", package = "SAVM") |>
read_sav(spacing = 2000)
# Depth
study_depth <- stars::read_stars(system.file("example", "le_bathy.tiff", package = "SAVM"))
View(le_bound)
View(study_zone)
study_zone[["points"]]
fetch <- compute_fetch(study_zone$points, le_bound)
fetch
View(fetch)
fetch[["mean_fetch"]]
View(fetch[["transect_lines"]])
depth <- st_extract(
study_depth,
study_zone$points |>
sf::st_transform(crs = sf::st_crs(study_depth))
)
depth
dat <- data.frame(
depth_m = depth$le_bathy.tiff,
fetch_km = fetch$mean_fetch$fetch_km
)
View(dat)
# get input
res <- sav_model(dat)
res
View(res)
sav_model
View(res)
res_secchi <- sav_model(
cbind(dat, secchi = runif(nrow(dat), 4, 12))
)
res_secchi
# Visualize results
plot_sav_distribution(res_secchi)
plot_sav_density(res_secchi)
plot_sav_distribution(res_secchi, post_hoc = FALSE)
plot_sav_density(res_secchi, post_hoc = FALSE)
study_zone$points <- cbind(study_zone$points, res)
plot_sav_tmap(study_zone)
plot_sav_tmap(study_zone, layers = "cover", interactive = FALSE)
# Visualize results
plot_sav_distribution(res_secchi)
plot_sav_density(res_secchi)
View(fetch)
View(fetch[["transect_lines"]])
fetch[["transect_lines"]]
?compute_fetch()
compute_fetch
?compute_fetch
library(devtools)
library(pak)
library(cli)
library(dplyr)
library(ggplot2)
library(patchwork)
library(rlang)
library(sf)
library(stats)
library(tmap)
library(tools)
library(units)
library(utils)
library(viridis)
devtools::load_all("SAVM_v0.0.1")
?compute_fetch
fetch2 <- compute_fetch(study_zone$points, le_bound, n_quad_seg=4)
fetch2[["transect_lines"]]
transects <- fetch2[["transect_lines"]] %>%
filter(rank > 12)
View(transects)
transects %>%
group_by(id_point) %>%
summarize(fetch_4pts = mean(transect_length))
## --------------------------------------------------------------#
## Script name: Script2-0_CalcFetch_Jon.R
##
## Purpose of script:
##    Generate fetch estimates for Jon
##
##
## Author: Paul Bzonek
##
## Date Created: 2025-05-22
##
## --------------------------------------------------------------#
## Modification Notes:
##
## --------------------------------------------------------------#
### Read in Jons data
#----------------------------#
#Shapefiles
#Shapefiles where polygon is land do not work
#LH_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKHuron/LKHuron_Land_fromGLAF_Water_WGS_Feb2020.shp") #
#LO_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKO/LKO_Land_fromGLAF_Water_WGS_Feb2020.shp")
#Shapefiles with water as polygon
LH_shapefile <- st_read("02 - Data/LakeHuron/LKH_Water_Temp_May2025.shp")
LO_shapefile <- st_read("02 - Data/LakeONtario/LKO_Water_Temp_May2025.shp")
#Points to append fetch to
LH_data_raw <- read.csv("02 - Data/SAV_2024 Samples - Fetch Ready/SAV_2024_LakeHuronPoints_20May2025.csv")
LO_data_raw <- read.csv("02 - Data/SAV_2024 Samples - Fetch Ready/SAV_2024_LakeOntarioPoints_20May2025.csv")
### Plot Raw Data
ggplot()+
#Check that water is the polygon
geom_sf(data=LH_shapefile, colour = "black", inherit.aes = FALSE, fill="lightblue")+
geom_point(data = LH_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
ggplot()+
geom_sf(data=LO_shapefile, colour = "black", fill="lightblue", inherit.aes = FALSE)+
geom_point(data = LO_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
### Project data
#----------------------------#
#Reproject shapefile to use meters
LH_shapefile_m <- st_transform(LH_shapefile, crs = 32617)
LO_shapefile_m <- st_transform(LO_shapefile, crs = 32617)
LO_fetch_raw2 <- compute_fetch(points=LO_data_m, polygon=LO_shapefile_m, n_quad_seg = 4)
?compute_fetch()
?compute_fetch
compute_fetch
LO_fetch_raw2 <- compute_fetch(points=LO_data_m, polygon=LO_shapefile_m, n_quad_seg = 4)
### Format outputs
#----------------------------#
#Reappend new fetch data with dataset
LH_fetch2 <- cbind(as.data.frame(left_join(LH_data_raw, LH_data)), as.data.frame(LH_fetch_raw2[["mean_fetch"]]))
LO_fetch2 <- cbind(as.data.frame(left_join(LO_data_raw, LO_data)), as.data.frame(LO_fetch_raw2[["mean_fetch"]]))
compute_fetch
sav_rf_cover_depth <- readRDS("C:/Users/Administrator/Desktop/R Working Directory/GitHub Desktop/SAVM/SAVM_v0.0.1/inst/extdata/models/sav_rf_cover_depth.rds")
View(sav_rf_cover_depth)
plot(sav_rf_cover_depth)
summary(sav_rf_cover_depth)
#Pre-install packages used by SAVM to bypass issues
#----------------------------#
library(devtools)
library(pak)
library(cli)
library(dplyr)
library(ggplot2)
library(patchwork)
library(rlang)
library(sf)
library(stats)
library(tmap)
library(tools)
library(units)
library(utils)
library(viridis)
devtools::load_all("SAVM_v0.0.1")
## --------------------------------------------------------------#
## Script name: Script2-1_CalcFetch_Jon.R
##
## Purpose of script:
##    Generate fetch estimates for Jon
##
##
## Author: Paul Bzonek
##
## Date Created: 2025-05-22
##
## --------------------------------------------------------------#
## Modification Notes:
##
## --------------------------------------------------------------#
### Read in Jons data
#----------------------------#
#Shapefiles
#Shapefiles with water as polygon
LH_shapefile <- st_read("02 - Data/LakeHuron/LKH_Water_Temp_May2025.shp")
LO_shapefile <- st_read("02 - Data/LakeONtario/LKO_Water_Temp_May2025.shp")
#Shapefiles where polygon is land do not work
#LH_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKHuron/LKHuron_Land_fromGLAF_Water_WGS_Feb2020.shp") #
#LO_shapefile <- st_read("02 - Data/SAV_2024 Samples - Fetch Ready/LKO/LKO_Land_fromGLAF_Water_WGS_Feb2020.shp")
#Points to append fetch to
LH_data_raw <- read.csv("02 - Data/SAV_2024 Samples - Fetch Ready/SAV_2024_LakeHuronPoints_20May2025.csv")
LO_data_raw <- read.csv("02 - Data/SAV_2024 Samples - Fetch Ready/SAV_2024_LakeOntarioPoints_20May2025.csv")
### Plot Raw Data
ggplot()+
#Check that water is the polygon
geom_sf(data=LH_shapefile, colour = "black", inherit.aes = FALSE, fill="lightblue")+
geom_point(data = LH_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
ggplot()+
geom_sf(data=LO_shapefile, colour = "black", fill="lightblue", inherit.aes = FALSE)+
geom_point(data = LO_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
### Reproject data
#----------------------------#
#Reproject shapefile to use meters
LH_shapefile_m <- st_transform(LH_shapefile, crs = 32617)
LO_shapefile_m <- st_transform(LO_shapefile, crs = 32617)
#Turn points into spatial object and reproject
LH_data_m <- LH_data_raw %>%
st_as_sf(., coords = c("POINT_X", "POINT_Y"), crs = 4326) %>% #Make spatial
st_transform(., crs = 32617) #Tranform to measure dist in meters
LO_data_m <- LO_data_raw %>%
st_as_sf(., coords = c("POINT_X", "POINT_Y"), crs = 4326) %>% #Make spatial
st_transform(., crs = 32617) #Tranform to measure dist in meters
### Plot Transformed Data
ggplot()+
geom_sf(data=LH_shapefile_m, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_sf(data=LH_data_m, colour = "blue", fill=NA, inherit.aes = FALSE)+
ylab("Northing")+xlab("Easting")+
theme_classic()
ggplot()+
geom_sf(data=LO_shapefile_m, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_sf(data=LO_data_m, colour = "blue", fill=NA, inherit.aes = FALSE)+
ylab("Northing")+xlab("Easting")+
theme_classic()
### Calculate fetch
#----------------------------#
#Run fetch function
LH_fetch_raw <- compute_fetch(points=LH_data_m, polygon=LH_shapefile_m, n_quad_seg = 4) #Specify that we want 16 bearings
LO_fetch_raw <- compute_fetch(points=LO_data_m, polygon=LO_shapefile_m, n_quad_seg = 4) #Specify that we want 16 bearings
#Default computes 36 bearings (n_quad_seg = 9)
#LH_fetch_raw <- compute_fetch(points=LH_data_m, polygon=LH_shapefile_m)
#LO_fetch_raw <- compute_fetch(points=LO_data_m, polygon=LO_shapefile_m)
### Format outputs
#Re-append new fetch data with existing dataset
LH_fetch <- cbind(as.data.frame(left_join(LH_data_m, LH_data_raw)), as.data.frame(LH_fetch_raw[["mean_fetch"]]))
LO_fetch <- cbind(as.data.frame(left_join(LO_data_m, LO_data_raw)), as.data.frame(LO_fetch_raw[["mean_fetch"]]))
#Fix Transect Lines as Per Jons instructions
#----------------------------#
#Grab four greatest bearing distances
LH_fetch_max4pts <- LH_fetch_raw[["transect_lines"]] %>%
slice_max(order_by = rank, n = 4, with_ties = FALSE)
#Average slected fetch bearings
LH_fetch_max4pts <- LH_fetch_max4pts %>%
group_by(id_point) %>%
summarize(fetch_max4pts = mean(transect_length))
#Append dataset
LH_fetch <- LH_fetch %>% cbind(LH_fetch_max4pts)
#Grab four greatest bearing distances
LO_fetch_max4pts <- LO_fetch_raw[["transect_lines"]] %>%
slice_max(order_by = rank, n = 4, with_ties = FALSE)
#Average slected fetch bearings
LO_fetch_max4pts <- LO_fetch_max4pts %>%
group_by(id_point) %>%
summarize(fetch_max4pts = mean(transect_length))
#Append dataset
LO_fetch <- LO_fetch %>% cbind(LO_fetch_max4pts)
#Check that data is reasonable
with(LH_fetch, plot(fetch_max4pts ~ Depth))
with(LO_fetch, plot(fetch_max4pts ~ Depth))
#Print data
#----------------------------#
write.csv(LH_fetch, "03 - Outputs/LH_fetch_2025-06-09.csv")
write.csv(LO_fetch, "03 - Outputs/LO_fetch_2025-06-09.csv")
write.csv(as.data.frame(LH_fetch_raw[["transect_lines"]]), "03 - Outputs/LH_fetch_transect_lines_2025-06-09.csv")
write.csv(as.data.frame(LO_fetch_raw[["transect_lines"]]), "03 - Outputs/LO_fetch_transect_lines_2025-06-09.csv")
#Pre-install packages used by SAVM to bypass issues
#----------------------------#
library(devtools)
library(pak)
library(cli)
library(dplyr)
library(ggplot2)
library(patchwork)
library(rlang)
library(sf)
library(stats)
library(tmap)
library(tools)
library(units)
library(utils)
library(viridis)
devtools::load_all("SAVM_v0.0.1")
View(LO_fetch)
View(LH_fetch)
as.data.frame(LH_fetch_raw[["transect_lines"]])
a <- as.data.frame(LH_fetch_raw[["transect_lines"]])
View(a)
a <- as.data.frame(LH_fetch)
View(a)
View(a[[18]][[1]])
a[[18]][[1]][[2]]
#Pre-install packages used by SAVM to bypass issues
#----------------------------#
library(devtools)
library(pak)
library(cli)
library(dplyr)
library(ggplot2)
library(patchwork)
library(rlang)
library(sf)
library(stats)
library(tmap)
library(tools)
library(units)
library(utils)
library(viridis)
devtools::load_all("SAVM_v0.0.1")
#Check that data is reasonable
with(LH_fetch, plot(fetch_max4pts ~ Depth))
library(SAVM)
library(sf)
library(stars)
print("hello world")
