stop("Aborted to avoid overwriting.")
}
}
# download SAVM from Github
git2r::clone("https://github.com/FishEcologyScience/SAVM.git", local_path = "04 - Package/SAVM")
#Install SAVM
devtools::load_all("04 - Package/SAVM")
LO_shapefile <- st_read("02 - Data/LakeONtario/LKO_Water_Temp_May2025.shp")
LO_data_raw <- read.csv("02 - Data/SAV_2024 Samples - Fetch Ready/SAV_2024_LakeOntarioPoints_20May2025.csv")
LO_shapefile_m <- st_transform(LO_shapefile, crs = 32617)
LO_data_m <- LO_data_raw %>%
st_as_sf(., coords = c("POINT_X", "POINT_Y"), crs = 4326) %>% #Make spatial
st_transform(., crs = 32617) #Tranform to measure dist in meters
ggplot()+
geom_sf(data=LO_shapefile_m, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_sf(data=LO_data_m, colour = "blue", fill=NA, inherit.aes = FALSE)+
ylab("Northing")+xlab("Easting")+
theme_classic()
LO_fetch_raw <- compute_fetch(points=LO_data_m, polygon=LO_shapefile_m, n_quad_seg = 4) #Specify that we want 16 bearings
#Pre-install packages used by SAVM to bypass issues
#----------------------------#
library(devtools)
library(pak)
library(cli)
library(dplyr)
library(ggplot2)
library(patchwork)
library(rlang)
library(sf)
library(stats)
library(tmap)
library(tools)
library(units)
library(utils)
library(viridis)
library(git2r) #Pull in recent package version
library(usethis) # Add a safety question
library(devtools)
library(pak)
library(cli)
library(dplyr)
library(ggplot2)
library(patchwork)
library(rlang)
library(sf)
library(stats)
library(tmap)
library(tools)
library(units)
library(utils)
library(viridis)
library(git2r) #Pull in recent package version
library(usethis) # Add a safety question
# Remove old version if needed
temp_folder_path <- "04 - Package/SAVM"
# Check if the folder exists
if (dir.exists(temp_folder_path)) {
# Ask the user to confirm deletion
if (ui_yeah(paste0("Folder '", temp_folder_path, "' already exists. Overwrite it?"))) {
unlink(temp_folder_path, recursive = TRUE, force = TRUE)
ui_done("Folder deleted. Proceeding.")
} else {
ui_oops("Operation cancelled by user.")
stop("Aborted to avoid overwriting.")
}
}
#Install SAVM
devtools::load_all("04 - Package/SAVM")
### Read in Jons data
#----------------------------#
#Shapefiles
#Shapefiles with water as polygon
LH_shapefile <- st_read("02 - Data/LakeHuron/LKH_Water_Temp_May2025.shp")
## --------------------------------------------------------------#
## Script name: SAVM_setup.R
##
## Purpose of script:
##    Use this script to get set up for the SAVM package
##
##
## Author: Paul Bzonek
##
## Date Created: 2024-05-01
##
## --------------------------------------------------------------#
## Modification Notes:
##
## --------------------------------------------------------------#
#Pre-install packages used by SAVM to bypass issues
#----------------------------#
library(devtools)
library(pak)
library(cli)
library(dplyr)
library(ggplot2)
library(patchwork)
library(rlang)
library(sf)
library(stats)
library(tmap)
library(tools)
library(units)
library(utils)
library(viridis)
library(git2r) #Pull in recent package version
library(usethis) # Add a safety question
# Remove old version if needed
temp_folder_path <- "04 - Package/SAVM"
# Check if the folder exists
if (dir.exists(temp_folder_path)) {
# Ask the user to confirm deletion
if (ui_yeah(paste0("Folder '", temp_folder_path, "' already exists. Overwrite it?"))) {
unlink(temp_folder_path, recursive = TRUE, force = TRUE)
ui_done("Folder deleted. Proceeding.")
} else {
ui_oops("Operation cancelled by user.")
stop("Aborted to avoid overwriting.")
}
}
# Remove old version if needed
temp_folder_path <- "04 - Package/SAVM"
# Check if the folder exists
if (dir.exists(temp_folder_path)) {
# Ask the user to confirm deletion
if (ui_yeah(paste0("Folder '", temp_folder_path, "' already exists. Overwrite it?"))) {
unlink(temp_folder_path, recursive = TRUE, force = TRUE)
ui_done("Folder deleted. Proceeding.")
} else {
ui_oops("Operation cancelled by user.")
stop("Aborted to avoid overwriting.")
}
}
# download SAVM from Github
git2r::clone("https://github.com/FishEcologyScience/SAVM.git", local_path = "04 - Package/SAVM")
#Install SAVM
devtools::load_all("04 - Package/SAVM")
library(SAVM)
library(sf)
library(stars)
# Lake Erie boundaries polygon
le_bound <- system.file("example", "lake_erie.gpkg", package = "SAVM") |>
sf::st_read() |>
sf::st_transform(crs = 3857)
# Lake Erie study zone: read
study_zone <- system.file("example", "study_zone.geojson", package = "SAVM") |>
read_sav(spacing = 2000)
# Depth
study_depth <- stars::read_stars(system.file("example", "le_bathy.tiff", package = "SAVM"))
fetch <- compute_fetch(study_zone$points, le_bound)
fetch
#Pre-install packages used by SAVM to bypass issues
#----------------------------#
library(devtools)
library(pak)
library(cli)
library(dplyr)
library(ggplot2)
library(patchwork)
library(rlang)
library(sf)
library(stats)
library(tmap)
library(tools)
library(units)
library(utils)
library(viridis)
library(git2r) #Pull in recent package version
library(usethis) # Add a safety question
# Remove old version if needed
temp_folder_path <- "04 - Package/SAVM"
# Check if the folder exists
if (dir.exists(temp_folder_path)) {
# Ask the user to confirm deletion
if (ui_yeah(paste0("Folder '", temp_folder_path, "' already exists. Overwrite it?"))) {
unlink(temp_folder_path, recursive = TRUE, force = TRUE)
ui_done("Folder deleted. Proceeding.")
} else {
ui_oops("Operation cancelled by user.")
stop("Aborted to avoid overwriting.")
}
}
# download SAVM from Github
git2r::clone("https://github.com/FishEcologyScience/SAVM.git", local_path = "04 - Package/SAVM")
#Install SAVM
devtools::load_all("04 - Package/SAVM")
library(SAVM)
library(sf)
library(stars)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(SAVM)
library(sf)
library(stars)
erie_land <- system.file(
"example", "lake_erie_land", "LkErie_Land_fromGLAF_Water_WGS_Feb2020.shx",
package = "SAVM", mustWork = TRUE
) |>
st_read()
erie_land |>
st_geometry() |> # to plot only the geometry
plot(col = 1)
erie_lake  <- erie_land |>
invert_polygon()
erie_lake |>
st_geometry() |>
plot(col = 1)
# Lake Erie boundaries polygon (reading from SAVM internal files)
le_bound <- system.file("example", "lake_erie.gpkg", package = "SAVM") |>
sf::st_read() |>
sf::st_transform(crs = 3857)
# Lake Erie study zone: read
study_zone <- system.file("example", "study_zone.geojson", package = "SAVM") |>
read_sav(spacing = 2000)
preview_grid(study_zone)
# Lake Erie study zone: read
study_zone <- system.file("example", "study_zone.geojson", package = "SAVM") |>
read_sav(spacing = 1000)
preview_grid(study_zone)
# Lake Erie study zone: read
study_zone <- system.file("example", "study_zone.geojson", package = "SAVM") |>
read_sav(spacing = 5000)
preview_grid(study_zone)
# Lake Erie study zone: read
study_zone <- system.file("example", "study_zone.geojson", package = "SAVM") |>
read_sav(spacing = 1000)
preview_grid(study_zone)
# Depth (reading with stars)
study_depth <- stars::read_stars(system.file("example", "le_bathy.tiff", package = "SAVM"))
fetch <- compute_fetch(study_zone$points, le_bound)
fetch
View(fetch)
View(fetch)
fetch[["mean_fetch"]]
fetch$mean_fetch  |> sf::st_write("fetch.shp")
depth <- st_extract(
study_depth,
study_zone$points |>
sf::st_transform(crs = sf::st_crs(study_depth))
)
depth
sp_dat <- fetch$mean_fetch
sp_dat$depth_m <- depth$le_bathy.tiff
View(sp_dat)
# get input
res <- sav_model(sp_dat)
res
res_secchi <- sav_model(
cbind(sp_dat, secchi = runif(nrow(sp_dat), 4, 12))
)
res_secchi
res_secchi |> sf::st_write("results.shp")
# Visualize results
plot_sav_distribution(res_secchi)
plot_sav_density(res_secchi)
plot_sav_distribution(res_secchi, post_hoc = FALSE)
plot_sav_density(res_secchi, post_hoc = FALSE)
study_zone$points <- cbind(study_zone$points, res)
plot_sav_tmap(study_zone)
plot_sav_tmap(study_zone, layers = "cover", interactive = FALSE)
#Install SAVM
devtools::load_all("04 - Package/SAVM")
### Read in Jons data
#----------------------------#
#Shapefiles
#Shapefiles with water as polygon
LO_shapefile <- st_read("02 - Data/LakeONtario/LKO_Water_Temp_May2025.shp")
#Points to append fetch to
data_test_raw <- readxl::read_xlsx("02 - Data/testFetch.xlsx")
### Plot Raw Data
ggplot()+
#Check that water is the polygon
geom_sf(data=LH_shapefile, colour = "black", inherit.aes = FALSE, fill="lightblue")+
geom_point(data = LH_data_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
### Plot Raw Data
ggplot()+
geom_sf(data=LO_shapefile, colour = "black", fill="lightblue", inherit.aes = FALSE)+
geom_point(data = data_test_raw,
aes(x=POINT_X, y=POINT_Y), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
View(data_test_raw)
### Plot Raw Data
ggplot()+
geom_sf(data=LO_shapefile, colour = "black", fill="lightblue", inherit.aes = FALSE)+
geom_point(data = data_test_raw,
aes(x=long, y=lat), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
### Reproject data
#----------------------------#
#Reproject shapefile to use meters
LO_shapefile_m <- st_transform(LO_shapefile, crs = 32617)
data_test_m <- data_test_raw %>%
st_as_sf(., coords = c("POINT_X", "POINT_Y"), crs = 4326) %>% #Make spatial
st_transform(., crs = 32617) #Tranform to measure dist in meters
?renmae
?rename
### Reproject data
#----------------------------#
#Reproject shapefile to use meters
LO_shapefile_m <- st_transform(LO_shapefile, crs = 32617)
data_test_m <- data_test_raw %>%
rename(POINT_X = long, POINT_Y=lat)
View(data_test_m)
data_test_m <- data_test_raw %>%
rename(POINT_X = long, POINT_Y=lat) %>%
st_as_sf(., coords = c("POINT_X", "POINT_Y"), crs = 4326) %>% #Make spatial
st_transform(., crs = 32617) #Tranform to measure dist in meters
### Plot Transformed Data
ggplot()+
geom_sf(data=LH_shapefile_m, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_sf(data=LH_data_m, colour = "blue", fill=NA, inherit.aes = FALSE)+
ylab("Northing")+xlab("Easting")+
theme_classic()
ggplot()+
geom_sf(data=LO_shapefile_m, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_sf(data=data_test_m, colour = "blue", fill=NA, inherit.aes = FALSE)+
ylab("Northing")+xlab("Easting")+
theme_classic()
?compute_fetch
### Calculate fetch
#----------------------------#
#Run fetch function
LO_fetch_raw <- compute_fetch(points=data_test_m, polygon=LO_shapefile_m, n_bearings=16) #Specify that we want 16 bearings
### Read in Jons data
#----------------------------#
#Shapefiles
#Shapefiles with water as polygon
LO_shapefile <- st_read("02 - Data/LakeONtario/LKO_Water_Temp_May2025.shp")
#Points to append fetch to
data_test_raw <- readxl::read_xlsx("02 - Data/testFetch.xlsx")
### Plot Raw Data
ggplot()+
geom_sf(data=LO_shapefile, colour = "black", fill="lightblue", inherit.aes = FALSE)+
geom_point(data = data_test_raw,
aes(x=long, y=lat), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
### Reproject data
#----------------------------#
#Reproject shapefile to use meters
LO_shapefile_m <- st_transform(LO_shapefile, crs = 32617)
data_test_m <- data_test_raw %>%
rename(POINT_X = long, POINT_Y=lat) %>%
st_as_sf(., coords = c("POINT_X", "POINT_Y"), crs = 4326) %>% #Make spatial
st_transform(., crs = 32617) #Tranform to measure dist in meters
### Plot Transformed Data
ggplot()+
geom_sf(data=LO_shapefile_m, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_sf(data=data_test_m, colour = "blue", fill=NA, inherit.aes = FALSE)+
ylab("Northing")+xlab("Easting")+
theme_classic()
### Plot Transformed Data
ggplot()+
geom_sf(data=LO_shapefile_m, colour = "black", fill="lightblue", inherit.aes = FALSE)+
geom_sf(data=data_test_m, colour = "blue", fill=NA, inherit.aes = FALSE)+
ylab("Northing")+xlab("Easting")+
theme_classic()
### Calculate fetch
#----------------------------#
#Run fetch function
LO_fetch_raw <- compute_fetch(points=data_test_m, polygon=LO_shapefile_m, n_bearings=16) #Specify that we want 16 bearings
View(data_test_m)
str(data_test_m)
#Pre-install packages used by SAVM to bypass issues
#----------------------------#
library(devtools)
library(pak)
library(cli)
library(dplyr)
library(ggplot2)
library(patchwork)
library(rlang)
library(sf)
library(stats)
library(tmap)
library(tools)
library(units)
library(utils)
library(viridis)
library(git2r) #Pull in recent package version
library(usethis) # Add a safety question
#Install SAVM
devtools::load_all("04 - Package/SAVM")
### Plot Raw Data
ggplot()+
geom_sf(data=LO_shapefile, colour = "black", fill="lightblue", inherit.aes = FALSE)+
geom_point(data = data_test_raw,
aes(x=long, y=lat), colour="firebrick", alpha=0.5)+
ylab("Latitude")+xlab("Longitude")+
theme_classic()
### Plot Transformed Data
a<-  ggplot()+
geom_sf(data=LO_shapefile_m, colour = "black", fill="lightblue", inherit.aes = FALSE)+
geom_sf(data=data_test_m, colour = "blue", fill=NA, inherit.aes = FALSE)+
ylab("Northing")+xlab("Easting")+
theme_classic()
ggplotly(a)
##
##
## Author: Paul Bzonek
##
## Date Created: 2025-07-17
##
## --------------------------------------------------------------#
## Modification Notes:
##
## --------------------------------------------------------------#
library(plotly)
ggplotly(a)
### Calculate fetch
#----------------------------#
#Run fetch function
LO_fetch_raw <- compute_fetch(points=data_test_m, polygon=LO_shapefile_m, n_bearings=16) #Specify that we want 16 bearings
View(LO_shapefile)
View(LO_shapefile[[11]][[1]])
?st_within
# Step 2: Check which points fall inside the polygon
# This returns a list: empty = point is outside
temp_within_index <- st_within(data_test_m, LO_shapefile_m)
# Step 3: Logical vector — TRUE if the point is inside
temp_is_inside <- lengths(temp_within_index) > 0
# Step 4: Create list of points outside the polygon
df_points_outside <- data_test_m[!temp_is_inside, ]
View(df_points_outside)
# Step 5: Remove those points from the main dataset
data_test_m_cleaned <- data_test_m[temp_is_inside, ]
### Calculate fetch
#----------------------------#
#Run fetch function
LO_fetch_raw <- compute_fetch(points=data_test_cleaned, polygon=LO_shapefile_m, n_bearings=16) #Specify that we want 16 bearings
### Calculate fetch
#----------------------------#
#Run fetch function
LO_fetch_raw <- compute_fetch(points=data_test_m_cleaned, polygon=LO_shapefile_m, n_bearings=16) #Specify that we want 16 bearings
### Calculate fetch
#----------------------------#
#Run fetch function
LO_fetch_raw <- compute_fetch(points=data_test_m, polygon=LO_shapefile_m, n_bearings=16) #Specify that we want 16 bearings
### Read in Jons data
#----------------------------#
#Shapefiles
#Shapefiles with water as polygon
LO_shapefile <- st_read("02 - Data/LakeONtario/LKO_Water_Temp_May2025.shp")
### Read in Jons data
#----------------------------#
#Shapefiles
#Shapefiles with water as polygon
LO_shapefile <- st_read("02 - Data/LakeOntario/LKO_Water_Temp_May2025.shp")
### Format outputs
#Re-append new fetch data with existing dataset
LO_fetch <- cbind(as.data.frame(left_join(data_test_m, data_test_raw)), as.data.frame(LO_fetch_raw[["mean_fetch"]]))
View(data_test_m_cleaned)
### Format outputs
#Re-append new fetch data with existing dataset
LO_fetch <- cbind(as.data.frame(left_join(data_test_m_cleaned, data_test_raw)), as.data.frame(LO_fetch_raw[["mean_fetch"]]))
View(LO_fetch)
data_test_raw
data_test_m_cleaned
LO_fetch_raw
LO_fetch_raw[["mean_fetch"]]
left_join(data_test_m_cleaned, data_test_raw)
cbind(as.data.frame(left_join(data_test_m_cleaned, data_test_raw)), as.data.frame(LO_fetch_raw[["mean_fetch"]]))
### Format outputs
#Re-append new fetch data with existing dataset
LO_fetch <- cbind(as.data.frame(left_join(data_test_m_cleaned, data_test_raw)), as.data.frame(LO_fetch_raw[["mean_fetch"]]))
ggplot(LO_fetch, aes(x=Fetch_km_mean, y=mean_fetch))+
geom_point()
names(LO_fetch)
### Format outputs
#Re-append new fetch data with existing dataset
LO_fetch <- as.data.frame(left_join(data_test_m_cleaned, data_test_raw)) %>%
select(Transect, Fetch_Old = Fetch_km_Mean, lat, long, id_point)
### Format outputs
#Re-append new fetch data with existing dataset
LO_fetch <- as.data.frame(left_join(data_test_m_cleaned, data_test_raw)) %>%
select(Transect, Fetch_km_Mean, lat, long, id_point)
### Format outputs
#Re-append new fetch data with existing dataset
LO_fetch <- as.data.frame(left_join(data_test_m_cleaned, data_test_raw)) %>%
select(Transect, Fetch_Old = Fetch_km_Mean, lat, long, OID_)
ggplot(LO_fetch, aes(x=Fetch_Old, y=mean_fetch))+
geom_point()
### Format outputs
#Re-append new fetch data with existing dataset
LO_fetch <- as.data.frame(left_join(data_test_m_cleaned, data_test_raw)) %>%
select(Transect, Fetch_Old = Fetch_km_Mean, lat, long, OID_)
### Format outputs
#Re-append new fetch data with existing dataset
LO_fetch <- as.data.frame(left_join(data_test_m_cleaned, data_test_raw)) %>%
select(Transect, Fetch_Old = Fetch_km_Mean, lat, long, OID_) %>%
cbind(as.data.frame(LO_fetch_raw[["mean_fetch"]]))
ggplot(LO_fetch, aes(x=Fetch_Old, y=mean_fetch))+
geom_point()
as.data.frame(left_join(data_test_m_cleaned, data_test_raw)) %>%
select(Transect, Fetch_Old = Fetch_km_Mean, lat, long, OID_) %>%
cbind(as.data.frame(LO_fetch_raw[["mean_fetch"]]))
LO_fetch_raw[["mean_fetch"]]
ggplot(LO_fetch, aes(x=Fetch_Old, y=fetch_km))+
geom_point()
ggplot(LO_fetch, aes(x=Fetch_Old, y=fetch_km))+
geom_point()+
theme_classic()
ggplot(LO_fetch, aes(x=Fetch_Old, y=fetch_km))+
geom_point()+
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
theme_classic()
